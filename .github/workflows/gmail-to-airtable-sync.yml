name: Gmail to Airtable Sync
on:
  schedule:
    - cron: '*/5 * * * *'  # J'ai corrigé la syntaxe cron qui semblait incorrecte
  workflow_dispatch:
jobs:
  sync:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v3
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install google-api-python-client google-auth-httplib2 google-auth-oauthlib requests
        
    - name: Debug GMAIL_TOKEN
      run: |
        if [ -n "${{ secrets.GMAIL_TOKEN }}" ]; then
          echo "Le token existe et contient $(echo "${{ secrets.GMAIL_TOKEN }}" | wc -c) caractères"
          echo "15 premiers caractères du token (devrait commencer par {) : $(echo "${{ secrets.GMAIL_TOKEN }}" | cut -c 1-15)"
        else
          echo "Le secret GMAIL_TOKEN n'est pas configuré."
        fi
    
    - name: Prepare credentials
      run: |
        # Créer le fichier credentials.json
        echo '${{ secrets.GMAIL_CREDENTIALS }}' > credentials.json
        
        # Créer le fichier token.json avec le secret
        # Utilisation de guillemets simples pour éviter les problèmes d'échappement
        echo '${{ secrets.GMAIL_TOKEN }}' > token.json
        
        # Validation du format JSON avec erreur détaillée
        if python -c "import json; json.load(open('token.json'))" 2>/dev/null; then
          echo "Token JSON valide!"
        else
          echo "ERREUR: Le token n'est pas un JSON valide! Contenu complet:"
          cat token.json
          echo "Tentative de correction automatique du format..."
          # Tentative de correction du format JSON
          cat token.json | python -c "import sys, json, ast; print(json.dumps(ast.literal_eval(sys.stdin.read())))" > token_fixed.json 2>/dev/null
          if [ $? -eq 0 ]; then
            mv token_fixed.json token.json
            echo "Format corrigé automatiquement!"
          else
            echo "Impossible de corriger automatiquement le format."
            exit 1
          fi
        fi
        
    - name: Run Gmail to Airtable sync
      id: run_sync
      env:
        AIRTABLE_API_KEY: ${{ secrets.AIRTABLE_API_KEY }}
        AIRTABLE_BASE_ID: ${{ secrets.AIRTABLE_BASE_ID }}
        AIRTABLE_TABLE_NAME: ${{ secrets.AIRTABLE_TABLE_NAME }}
        CI: true  # Marquer explicitement comme environnement CI
      run: |
        # Exécuter le script avec gestion d'erreur
        python gmail_to_airtable.py || echo "Le script a rencontré une erreur, mais le workflow continue"
        
        # Sauvegarder le nouveau token s'il existe et est valide
        if [ -f token.json ]; then
          # Vérifier que le token est un JSON valide
          if python -c "import json; json.load(open('token.json'))" 2>/dev/null; then
            TOKEN_CONTENT=$(cat token.json)
            echo "token<<EOF" >> $GITHUB_OUTPUT
            echo "$TOKEN_CONTENT" >> $GITHUB_OUTPUT
            echo "EOF" >> $GITHUB_OUTPUT
          else
            echo "Le nouveau token n'est pas un JSON valide. Il ne sera pas sauvegardé."
          fi
        fi
    
    - name: Update token in GitHub secrets
      if: steps.run_sync.outputs.token != ''
      uses: gliech/create-github-secret-action@v1
      with:
        name: GMAIL_TOKEN
        value: ${{ steps.run_sync.outputs.token }}
        pa_token: ${{ secrets.GH_PA_TOKEN }}
