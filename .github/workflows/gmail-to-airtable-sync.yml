name: Gmail to Airtable Sync
on:
  schedule:
    # Exécution toutes les 5 minutes
    - cron: '*/5 * * * *'
  workflow_dispatch: # Pour permettre l'exécution manuelle
jobs:
  sync:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v3
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install google-api-python-client google-auth-httplib2 google-auth-oauthlib requests
        
    - name: Run Gmail to Airtable sync
      id: run_sync  # Ajout de l'ID pour référencer cette étape plus tard
      env:
        AIRTABLE_API_KEY: ${{ secrets.AIRTABLE_API_KEY }}
        AIRTABLE_BASE_ID: ${{ secrets.AIRTABLE_BASE_ID }}
        AIRTABLE_TABLE_NAME: ${{ secrets.AIRTABLE_TABLE_NAME }}
        GMAIL_CREDENTIALS: ${{ secrets.GMAIL_CREDENTIALS }}
      run: |
        # Créer le fichier credentials.json
        echo "$GMAIL_CREDENTIALS" > credentials.json
        
        # Si le token.json existe déjà dans les secrets, l'utiliser
        if [ -n "${{ secrets.GMAIL_TOKEN }}" ]; then
          echo "${{ secrets.GMAIL_TOKEN }}" > token.json
        fi
        
        # Exécuter le script
        python gmail_to_airtable.py
        
        # Sauvegarder le nouveau token pour les futures exécutions
        if [ -f token.json ]; then
          TOKEN_CONTENT=$(cat token.json)
          echo "token=$TOKEN_CONTENT" >> $GITHUB_OUTPUT
        fi
    
    - name: Update token in GitHub secrets
      if: steps.run_sync.outputs.token != ''
      uses: gliech/create-github-secret-action@v1
      with:
        name: GMAIL_TOKEN
        value: ${{ steps.run_sync.outputs.token }}
        pa_token: ${{ secrets.GH_PA_TOKEN }}
