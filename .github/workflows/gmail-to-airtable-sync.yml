name: Gmail to Airtable Sync
on:
  schedule:
    - cron: '*/5 * * * *'
  workflow_dispatch:
jobs:
  sync:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install google-api-python-client google-auth-httplib2 google-auth-oauthlib requests
        
    - name: Debug GMAIL_TOKEN
      run: |
        if [ -n "${{ secrets.GMAIL_TOKEN }}" ]; then
          echo "Le token existe et contient $(echo "${{ secrets.GMAIL_TOKEN }}" | wc -c) caractères"
          echo "15 premiers caractères du token (devrait commencer par {) : $(echo "${{ secrets.GMAIL_TOKEN }}" | cut -c 1-15)"
        else
          echo "Le secret GMAIL_TOKEN n'est pas configuré."
        fi
    
    - name: Prepare credentials
      run: |
        # Créer le fichier credentials.json
        echo '${{ secrets.GMAIL_CREDENTIALS }}' > credentials.json
        
        # Créer le fichier token.json avec le secret
        echo '${{ secrets.GMAIL_TOKEN }}' > token.json
        
        # Validation du format JSON avec erreur détaillée
        if python -c "import json; json.load(open('token.json'))" 2>/dev/null; then
          echo "Token JSON valide!"
        else
          echo "ERREUR: Le token n'est pas un JSON valide! Contenu complet:"
          cat token.json
          echo "Tentative de correction automatique du format..."
          # Tentative de correction du format JSON
          cat token.json | python -c "import sys, json, ast; print(json.dumps(ast.literal_eval(sys.stdin.read())))" > token_fixed.json 2>/dev/null
          if [ $? -eq 0 ]; then
            mv token_fixed.json token.json
            echo "Format corrigé automatiquement!"
          else
            echo "Impossible de corriger automatiquement le format."
            exit 1
          fi
        fi
        
    - name: Run Gmail to Airtable sync
      id: run_sync
      env:
        AIRTABLE_API_KEY: ${{ secrets.AIRTABLE_API_KEY }}
        AIRTABLE_BASE_ID: ${{ secrets.AIRTABLE_BASE_ID }}
        AIRTABLE_TABLE_NAME: ${{ secrets.AIRTABLE_TABLE_NAME }}
        CI: true
      run: |
        # Exécuter le script avec gestion d'erreur
        python gmail_to_airtable.py || echo "Le script a rencontré une erreur, mais le workflow continue"
        
        # Sauvegarder le nouveau token s'il existe et est valide
        if [ -f token.json ]; then
          # Vérifier que le token est un JSON valide
          if python -c "import json; json.load(open('token.json'))" 2>/dev/null; then
            TOKEN_CONTENT=$(cat token.json)
            echo "token<<EOF" >> $GITHUB_OUTPUT
            echo "$TOKEN_CONTENT" >> $GITHUB_OUTPUT
            echo "EOF" >> $GITHUB_OUTPUT
            echo "Token prêt pour la mise à jour"
          else
            echo "Le nouveau token n'est pas un JSON valide. Il ne sera pas sauvegardé."
          fi
        fi
    
    - name: Update token in GitHub secrets (Method 1 - CLI)
      if: steps.run_sync.outputs.token != ''
      env:
        GITHUB_TOKEN: ${{ secrets.GH_PA_TOKEN }}
        NEW_TOKEN: ${{ steps.run_sync.outputs.token }}
      run: |
        echo "Tentative de mise à jour du token via GitHub CLI..."
        
        # Installer GitHub CLI si pas disponible
        if ! command -v gh &> /dev/null; then
          echo "Installation de GitHub CLI..."
          curl -fsSL https://cli.github.com/packages/githubcli-archive-keyring.gpg | sudo dd of=/usr/share/keyrings/githubcli-archive-keyring.gpg
          echo "deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/githubcli-archive-keyring.gpg] https://cli.github.com/packages stable main" | sudo tee /etc/apt/sources.list.d/github-cli.list > /dev/null
          sudo apt update
          sudo apt install gh -y
        fi
        
        # Mettre à jour le secret via GitHub CLI
        echo "$NEW_TOKEN" | gh secret set GMAIL_TOKEN --repo ${{ github.repository }} || {
          echo "Échec de la mise à jour via GitHub CLI"
          exit 1
        }
        
        echo "Token mis à jour avec succès via GitHub CLI"
    
    - name: Update token in GitHub secrets (Method 2 - API directe)
      if: failure() && steps.run_sync.outputs.token != ''
      env:
        GITHUB_TOKEN: ${{ secrets.GH_PA_TOKEN }}
        NEW_TOKEN: ${{ steps.run_sync.outputs.token }}
      run: |
        echo "Tentative de mise à jour du token via API GitHub directe..."
        
        # Récupérer la clé publique du repository
        PUBLIC_KEY_RESPONSE=$(curl -s -H "Authorization: token $GITHUB_TOKEN" \
          -H "Accept: application/vnd.github.v3+json" \
          "https://api.github.com/repos/${{ github.repository }}/actions/secrets/public-key")
        
        PUBLIC_KEY=$(echo "$PUBLIC_KEY_RESPONSE" | python -c "import sys, json; print(json.load(sys.stdin)['key'])")
        KEY_ID=$(echo "$PUBLIC_KEY_RESPONSE" | python -c "import sys, json; print(json.load(sys.stdin)['key_id'])")
        
        # Chiffrer le secret avec la clé publique
        ENCRYPTED_VALUE=$(python -c "
        import base64
        import json
        from nacl import encoding, public
        
        def encrypt_secret(public_key: str, secret_value: str) -> str:
            public_key_bytes = base64.b64decode(public_key)
            public_key_obj = public.PublicKey(public_key_bytes)
            sealed_box = public.SealedBox(public_key_obj)
            encrypted = sealed_box.encrypt(secret_value.encode('utf-8'))
            return base64.b64encode(encrypted).decode('utf-8')
        
        print(encrypt_secret('$PUBLIC_KEY', '''$NEW_TOKEN'''))
        ")
        
        # Mettre à jour le secret
        curl -X PUT \
          -H "Authorization: token $GITHUB_TOKEN" \
          -H "Accept: application/vnd.github.v3+json" \
          -H "Content-Type: application/json" \
          -d "{\"encrypted_value\":\"$ENCRYPTED_VALUE\",\"key_id\":\"$KEY_ID\"}" \
          "https://api.github.com/repos/${{ github.repository }}/actions/secrets/GMAIL_TOKEN"
        
        echo "Token mis à jour avec succès via API directe"
    
    - name: Fallback - Update token via alternative action
      if: failure() && steps.run_sync.outputs.token != ''
      uses: hmanzur/actions-set-secret@v2.0.0
      with:
        name: 'GMAIL_TOKEN'
        value: ${{ steps.run_sync.outputs.token }}
        repository: ${{ github.repository }}
        token: ${{ secrets.GH_PA_TOKEN }}
